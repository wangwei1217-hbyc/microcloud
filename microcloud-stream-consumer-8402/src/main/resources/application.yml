server:
  port: 8402
spring:
  application:
    name: microcloud-stream-consumer
  cloud:
    stream:
      binders:  #　在此处配置要绑定的rabbitmq的服务信息
        defaultRabbit:  # 表示定义的名称，用于与binding整合
          type: rabbit  # 消息组件类型.rabbit或kafka
          environment:  # 设置rabbitmq的相关的环境配置
            spring:
               rabbitmq:
                 host: 192.168.109.128
                 port: 5672
                 username: wangwei
                 password: wangwei
                 virtual-host: /
      rabbit:  #进行rabbit的相关绑定配置
        bindings:
          my_input:
            consumer:   #进行消费端配置
              bindingRoutingKey: myCloudKey  #设置一个routingKey信息
              # 当设置routingKey后，只有生产端发送消息时的routingKey与消费端匹配，消费端才会消费该消息。
      bindings:  # 服务的整合处理. 消费端设置input。发送端设置output
#        input:  # 这个名字是一个通道的名称，系统默认为input，但可以自定义。在分析具体源代码的时候会进行说明
         my_input: #当自定义消息通道后，此处填写自定义通道中 输入通道 的名称
#          destination: MyStreamExchange  # 表示要使用的Exchange名称定义
          destination: MyRKExchange  # 表示要使用的Exchange名称定义
          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
          binder: defaultRabbit # 设置要绑定的消息服务的具体设置
          group: myCloudGroup  #设置进行操作的分组，实际上就表示持久化.不设置的话，消息是临时消息，如果此时没有消费端，消息会被丢弃。
          # 启动时首先启动消费端，会发现rabbit中的queue具有了持久化属性。queue命名：MyStreamExchange.myCloudGroup
          # 然后关闭消费端，队列queue依旧存在
eureka:
  client:
    service-url:
      defaultZone: http://edmin:edmin@eureka-7001.com:7001/eureka
  instance:
    # 在信息列表时显示主机名称
    instance-id: receive-8402.com
    prefer-ip-address: true

    ## 以下两项配置不建议自定义配置
    # 如果从上一次心跳到现在超过了5秒的间隔，还没有心跳的话，就认为当前服务已宕掉（默认是90秒）
#    lease-expiration-duration-in-seconds: 5
    # 设置心跳的时间间隔（默认是30秒）
#    lease-renewal-interval-in-seconds: 2

